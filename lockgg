




local L_1_ = require(game.ReplicatedStorage.engine.modules.Network)
local L_2_ = getrawmetatable(L_1_)

local L_3_ = getupvalues(L_2_.__index)
local L_4_ = L_3_[7][1]

setrawmetatable(L_4_, {
    __newindex = function(L_205_arg0, L_206_arg1, L_207_arg2)
    end
})


wait(2.5)

for i, v in pairs(getgc(true)) do
    if type(v) == "table" and rawget(v, "gkCheck") then


        local specialToolIndex, overlapCheckIndex
        local constants = debug.getconstants(v.react)

        for ci, cv in pairs(constants) do
            if cv == "ignoreReactDecline" then
                debug.setconstant(v.react, ci, "ball")
            elseif cv == "specialTool" then
                specialToolIndex = ci
            elseif cv == "overlapCheck" then
                overlapCheckIndex = ci
            end
        end

        if specialToolIndex then
            debug.setconstant(v.react, specialToolIndex, "ball")
        elseif overlapCheckIndex then
            rawset(v, "check", function()
                return true
            end)
            debug.setconstant(v.react, overlapCheckIndex, "check")
        end
    end
end

local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/HydraScripts/free/refs/heads/main/adwaf"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()



local Window = Fluent:CreateWindow({
    Title = "lock.gg",
    SubTitle = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name,
    TabWidth = 140, 
    Size = UDim2.fromOffset(700, 400),
    Acrylic = false, 
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.RightControl 
})


Fluent:Notify({
    Title = "lock.gg ",
    Content = "installized in 2.5 seconds",
    SubContent = "", 
    Duration = 15 
})
local Tabs = {
    Hitbox = Window:AddTab({ Title = "Hitbox Expander ", Icon = "chevrons-left-right" }),
    Player = Window:AddTab({ Title = "Character", Icon = "square-user-round" }),
    Game = Window:AddTab({ Title = "Game", Icon = "gamepad" }),
    Misc = Window:AddTab({ Title = "Miscellaneous", Icon = "puzzle" }),
    Auto = Window:AddTab({ Title = "Auto Features", Icon = "zap" }),
    Keybinds = Window:AddTab({ Title = "Keybind Library", Icon = "keyboard" }),
    StatsEditor = Window:AddTab({ Title = "Data Editor", Icon = "chart-no-axes-combined" }),
    BallMod = Window:AddTab({ Title = "Ball Mod", Icon = "circle" }), 
    Team = Window:AddTab({ Title = "Teams", Icon = "users" }),
}




local Players = game:GetService("Players")
local CollectionService = game:GetService("CollectionService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Character, HumanoidRootPart
local cBalls = {}

-- // Config 
local ENABLED = true
local SIZE_X, SIZE_Y, SIZE_Z = 3, 3, 3


local Network = require(game.ReplicatedStorage.engine.modules.Network)
local meta = getrawmetatable(Network)
local upv = getupvalues(meta.__index)
local target = upv[7][1]

setrawmetatable(target, {
	__newindex = function() end
})

task.wait(2.5)

for _, v in pairs(getgc(true)) do
	if type(v) == "table" and rawget(v, "gkCheck") then
		local constants = debug.getconstants(v.react)
		for i, val in pairs(constants) do
			if val == "ignoreReactDecline" then
				debug.setconstant(v.react, i, "ball")
			elseif val == "specialTool" then
				debug.setconstant(v.react, i, "ball")
			elseif val == "overlapCheck" then
				rawset(v, "check", function() return true end)
				debug.setconstant(v.react, i, "check")
			end
		end
	end
end

local ps = LocalPlayer:WaitForChild("PlayerScripts")
local root = require(ps:WaitForChild("mechanics"):WaitForChild("root"))

if root and type(root.react) == "function" then
	local original
	local success, hook = pcall(hookfunction, root.react, function(a, b)
		if type(b) == "table" then
			b.ignoreReactDecline = true
			b.forceNetworkOwner = true
		end
		return pcall(original, a, b)
	end)
	if success then original = hook end
end


local function addBall(ball)
	if not ball:IsA("BasePart") then return end
	table.insert(cBalls, ball)

	local mt = getrawmetatable(ball)
	if not mt then return end
	setreadonly(mt, false)

	local cloned = table.clone(mt)
	local rawIndex = cloned.__index

	cloned.__index = newcclosure(function(self, key)
		if not checkcaller() and key == "Position" and HumanoidRootPart then
			return HumanoidRootPart.Position
		end
		return rawIndex(self, key)
	end)

	setrawmetatable(ball, cloned)
end

for _, b in ipairs(CollectionService:GetTagged("Ball")) do
	addBall(b)
end

CollectionService:GetInstanceAddedSignal("Ball"):Connect(addBall)
CollectionService:GetInstanceRemovedSignal("Ball"):Connect(function(ball)
	local i = table.find(cBalls, ball)
	if i then table.remove(cBalls, i) end
end)


local function setupCharacter(char)
	Character = char
	HumanoidRootPart = char:WaitForChild("HumanoidRootPart")
end

if LocalPlayer.Character then setupCharacter(LocalPlayer.Character) end
LocalPlayer.CharacterAdded:Connect(setupCharacter)

local function touchBall(ball)
	if not Character then return end
	for _, limb in ipairs({ "LeftFoot", "RightFoot", "UpperTorso", "Head", "Collide" }) do
		local part = Character:FindFirstChild(limb)
		if part then
			firetouchinterest(part, ball, 0)
			firetouchinterest(part, ball, 1)
		end
	end
end


RunService.Heartbeat:Connect(function()
	if not ENABLED or not HumanoidRootPart then return end

	local overlap = OverlapParams.new()
	overlap.FilterType = Enum.RaycastFilterType.Whitelist
	overlap.FilterDescendantsInstances = cBalls

	local box = Vector3.new(SIZE_X, SIZE_Y, SIZE_Z)
	local hits = workspace:GetPartBoundsInBox(HumanoidRootPart.CFrame, box, overlap)

	if #hits > 0 then
		table.sort(hits, function(a, b)
			return (a.Position - HumanoidRootPart.Position).Magnitude < (b.Position - HumanoidRootPart.Position).Magnitude
		end)
		touchBall(hits[1])
	end
end)







Tabs.Hitbox:AddToggle("reach_enable", {
	Title = "Enable Reach",
	Default = true,
	Callback = function(v)
		ENABLED = v
	end
})

Tabs.Hitbox:AddSlider("reach_x", {
	Title = "Reach X Axis",
	Default = 3,
	Min = 1,
	Max = 1000,
	Callback = function(v)
		SIZE_X = v
	end
})

Tabs.Hitbox:AddSlider("reach_y", {
	Title = "Reach Y Axis",
	Default = 3,
	Min = 1,
	Max = 1000,
	Callback = function(v)
		SIZE_Y = v
	end
})

Tabs.Hitbox:AddSlider("reach_z", {
	Title = "Reach Z Axis",
	Default = 3,
	Min = 1,
	Max = 1000,
	Callback = function(v)
		SIZE_Z = v
	end
})



local Players = game:GetService("Players")
local player = Players.LocalPlayer


local ragdollClient = require(game:GetService("ReplicatedStorage").engine.modules.Ragdoll.client)
local ragdoll

Tabs.Misc:AddButton({
	Title = "Start Ragdoll",
	Callback = function()
		if not ragdoll then
			ragdoll = ragdollClient.new()
			ragdoll:init()
		end
		ragdoll:toggle(true)
	end
})

Tabs.Misc:AddButton({
	Title = "Stop Ragdoll",
	Callback = function()
		if ragdoll then
			ragdoll:toggle(false)
		end
	end
})


local function setGKBoxes(disable)
	for _, part in pairs(workspace:GetDescendants()) do
		if part:IsA("BasePart") and part.Name:lower():find("gkbox") then
			part.CanCollide = not disable
			part.Transparency = disable and 1 or 0.5
		end
	end
end

Tabs.Misc:AddToggle("gk_toggle", {
	Title = "GK Outside the Box",
	Default = false,
	Callback = function(v)
		setGKBoxes(v)
	end
})



local function toggleGKGloves(enable)
	local char = player.Character
	if not char then return end

	for _, item in pairs(char:GetChildren()) do
		if item:IsA("Gloves") and item.Name:lower():find("Glove") then
			item.Handle.Transparency = enable and 0 or 1
		end
	end
end

Tabs.Misc:AddButton({
	Title = "Show GK Gloves",
	Callback = function()
		toggleGKGloves(true)
	end
})

Tabs.Misc:AddButton({
	Title = "Hide GK Gloves",
	Callback = function()
		toggleGKGloves(false)
	end
})

local rs = game:GetService("RunService")
local ts = game:GetService("TweenService")
local vim = game:GetService("VirtualInputManager")
local is = game:GetService("UserInputService")
local plr = game.Players.LocalPlayer
local freekickEnabled = false
local inFreekick = false
local currentFreekickTween

Tabs.Misc:AddToggle("FreekickToggle", {
    Title = "Auto Freekick",
    Description = "",
    Default = false,
    Callback = function(state)
        freekickEnabled = state
    end
})
rs.RenderStepped:Connect(function()
    if not freekickEnabled then return end

    local composureFrame

    pcall(function()
        local gui = plr:FindFirstChild("PlayerGui")
        local billboard = gui and gui:FindFirstChild("billboardUI")
        if not billboard then return end

        for _, overlay in pairs(billboard:GetChildren()) do
            if overlay.Name == "Overlay" then
                local main = overlay:FindFirstChild("Main")
                local container = main and main:FindFirstChild("Container")
                local composure = container and container:FindFirstChild("Composure")
                if composure then
                    composureFrame = composure
                    break
                end
            end
        end
    end)

    inFreekick = composureFrame and true or false

    if inFreekick and composureFrame then
        if currentFreekickTween then currentFreekickTween:Cancel() end

        composureFrame.Size = UDim2.new(composureFrame.Size.X.Scale, composureFrame.Size.X.Offset, 0.1, composureFrame.Size.Y.Offset)

        local ti = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
        currentFreekickTween = ts:Create(composureFrame, ti, {
            Size = UDim2.new(composureFrame.Size.X.Scale, composureFrame.Size.X.Offset, 0.1, composureFrame.Size.Y.Offset)
        })

        currentFreekickTween:Play()
        currentFreekickTween.Completed:Connect(function()
            composureFrame.Size = UDim2.new(composureFrame.Size.X.Scale, composureFrame.Size.X.Offset, 0.1, composureFrame.Size.Y.Offset)
        end)
    end
end)
is.InputEnded:Connect(function(input, processed)
    if processed then return end
    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.Space then
        if inFreekick then
            vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
            task.wait()
            vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
        end
    end
end)


local penaltyEnabled = false
local currentPenaltyTween

Tabs.Misc:AddToggle("PenaltyToggle", {
    Title = "Auto Penalty",
    Description = "",
    Default = false,
    Callback = function(state)
        penaltyEnabled = state
    end
})

rs.RenderStepped:Connect(function()
    if penaltyEnabled then
        local composurePart

        pcall(function()
            local gameFolder = workspace:FindFirstChild("game")
            local debugFolder = gameFolder and gameFolder:FindFirstChild("debug")
            local playerModel = debugFolder and debugFolder:FindFirstChild(plr.Name)
            local overlay = playerModel and playerModel:FindFirstChild("Overlay")
            composurePart = overlay and overlay:FindFirstChild("Composure")
        end)

        if composurePart then
            if currentPenaltyTween then currentPenaltyTween:Cancel() end

            composurePart.Size = Vector3.new(3, 5, 3)
            local ti = TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
            currentPenaltyTween = ts:Create(composurePart, ti, {
                Size = Vector3.new(3, 5, 3)
            })
            currentPenaltyTween:Play()

            currentPenaltyTween.Completed:Connect(function()
                composurePart.Size = Vector3.new(3, 5, 3)
            end)
        end
    end
end)





local RunService = game:GetService("RunService")
local Player = game:GetService("Players").LocalPlayer
local stamina = Player:WaitForChild("PlayerScripts"):WaitForChild("controllers"):WaitForChild("movementController"):WaitForChild("stamina")
local originalStaminaValue = stamina.Value
local staminaConnection
local Toggle = Tabs.Player:AddToggle("MyToggle", 
{
    Title = "Unlimited Stamina", 
    Description = "Never Lose Stamina",
    Default = false,
    Callback = function(Value)
        if Value then
			staminaConnection = RunService.Heartbeat:Connect(function()
				if stamina then
					stamina.Value = 100
				end
			end)
		else
			if staminaConnection then
				staminaConnection:Disconnect()
				staminaConnection = nil
			end
			stamina.Value = originalStaminaValue
		end
	end
})

local tpwalking = false
local function StartTeleportWalk(speed)
	tpwalking = true
	local Heartbeat = RunService.Heartbeat
	task.spawn(function()
		while tpwalking and Player.Character and Player.Character:FindFirstChildWhichIsA("Humanoid") do
			local Character = Player.Character
			local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
			local delta = Heartbeat:Wait()

			if Humanoid.MoveDirection.Magnitude > 0 then
				Character:TranslateBy(Humanoid.MoveDirection * speed * delta * 5)
			end
		end
	end)
end

local function StopTeleportWalk()
	tpwalking = false
end
local Toggle = Tabs.Player:AddToggle("", 
{
    Title = "Speed Boost", 
    Description = "",
    Default = false,
    Callback = function(Value)
        if Value then
			StartTeleportWalk(0.5)
		else
			StopTeleportWalk()
		end
	end
})

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local function setChargeSpeed(speed)
    local kickBindsFolder = Player:WaitForChild("PlayerScripts"):WaitForChild("mechanics"):WaitForChild("kick"):WaitForChild("binds")
    for _, module in ipairs(kickBindsFolder:GetChildren()) do
        if module:IsA("ModuleScript") then
            local success, requiredModule = pcall(require, module)
            if success and type(requiredModule) == "table" and typeof(requiredModule.chargeSpeed) == "number" then
                requiredModule.chargeSpeed = speed
            else
                warn("use an better executor:", module.Name)
            end
        end
    end
end

local Toggle = Tabs.Player:AddToggle("MyToggle", 
{
    Title = "Instant Shot Power", 
    Description = "Bad Executor Doesnt Support",
    Default = false,
    Callback = function(state)
        if state then
            setChargeSpeed(0.1) 
        else
            setChargeSpeed(1)  
        end
    end
})
local remotes = game:GetService("ReplicatedStorage"):WaitForChild("network"):WaitForChild("Shared")
Tabs.Player:AddButton({
    Title = "Pitch Tp",
    Description = "",
    Callback = function()
        for _, revent in pairs(remotes:GetChildren()) do
			if revent:IsA("RemoteEvent") then
				local ohNumber1 = 1000
				local ohString2 = "pitchTeleporter"
				revent:FireServer(ohNumber1, ohString2)
			end
		end
	end
})

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local Celebrations = {
    ["Fist Pump"] = "rbxassetid://18545628047",
    ["Right Here Right Now"] = "rbxassetid://18548417924",
    ["Tshabalala"] = "rbxassetid://18673725349",
    ["Archer Slide"] = "rbxassetid://18560742891",
    ["Point Up"] = "rbxassetid://18563918200",
    ["The Griddy"] = "rbxassetid://18774591442",
    ["Boxing"] = "rbxassetid://18584841032",
    ["Glorious"] = "rbxassetid://18584847345",
    ["Yoga"] = "rbxassetid://18673721840",
    ["Calma"] = "rbxassetid://18673636723",
    ["Shivering"] = "rbxassetid://18673647071",
    ["Folded Arms Knee Slide"] = "rbxassetid://18673668417",
    ["Gunleann"] = "rbxassetid://18673677815",
    ["Knockout"] = "rbxassetid://18673687513",
    ["Salute Knee Slide"] = "rbxassetid://18673699107",
    ["Meditation"] = "rbxassetid://18673705797",
    ["Ice Cold"] = "rbxassetid://18745497583",
    ["Catwalk"] = "rbxassetid://18775156520",
    ["Backflip"] = "rbxassetid://18926012773",
    ["Double Siuuu"] = "rbxassetid://18926038745",
    ["Prayerr"] = "rbxassetid://18926177589",
    ["Folded Arms"] = "rbxassetid://18926195587",
    ["Spanish Dance"] = "rbxassetid://18926223307",
    ["Pigeon"] = "rbxassetid://109637224628241", 
}
local Dropdown = Tabs.Player:AddDropdown("Dropdown", {
    Title = "Play Celebration",
    Description = "",
    Values = {
        "Fist Pump", "Right Here Right Now", "Tshabalala", "Archer Slide", "Point Up",
        "The Griddy", "Boxing", "Glorious", "Yoga", "Calma", "Shivering",
        "Folded Arms Knee Slide", "Gunleann", "Knockout", "Salute Knee Slide",
        "Meditation", "Ice Cold", "Catwalk", "Backflip", "Double Siuuu",
        "Prayerr", "Folded Arms", "Spanish Dance", "Pigeon", "Strange Dance"
    },
    Multi = false,
    Default = 1,
    Callback = function(selected)
        local animId = Celebrations[selected]
        if not animId or animId == "" then
            warn("isnt found:", selected)
            return
        end
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if not humanoid then
            warn("No humanid found.")
            return
        end
        local animator = humanoid:FindFirstChild("Animator")
        if not animator then
            animator = Instance.new("Animator")
            animator.Parent = humanoid
        end
        local animation = Instance.new("Animation")
        animation.AnimationId = animId
        animation.Name = "TempAnim"
        local success, result = pcall(function()
            return animator:LoadAnimation(animation)
        end)
        if success and result then
            result:Play()
        else
            warn("Failed to loa animation:", result)
        end
    end
})
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local RefereeAnims = {
    ["Card"] = "rbxassetid://16096886456", 
    ["Penalty"] = "rbxassetid://16096985868",
    ["Warning"] = "rbxassetid://16096947622",
    ["Advantage"] = "rbxassetid://16097904170",
    ["Whistle"] = "rbxassetid://16096892797",
}
local Dropdown = Tabs.Player:AddDropdown("RefereeDropdown", {
    Title = "Play Referee ",
    Description = "",
    Values = {"Card", "Penalty", "Warning", "Advantage", "Whistle"},
    Multi = false,
    Default = 1,
    Callback = function(selected)
        local animId = RefereeAnims[selected]
        if not animId or animId == "" then
            warn(" assigned for:", selected)
            return
        end
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if not humanoid then
            warn("Not  found.")
            return
        end
        local animator = humanoid:FindFirstChild("Animator")
        if not animator then
            animator = Instance.new("Animator")
            animator.Parent = humanoid
        end
        local animation = Instance.new("Animation")
        animation.AnimationId = animId
        animation.Name = "RefAnim"
        local success, result = pcall(function()
            return animator:LoadAnimation(animation)
        end)
        if success and result then
            result:Play()
        else
            warn("work anyways:", result)
        end
    end
})
Tabs.Game:AddButton({
    Title = "Edit Match Settings",
    Description = "",
    Callback = function()
        local player = game.Players.LocalPlayer
        local matchSettings = player:WaitForChild("PlayerScripts"):WaitForChild("visuals"):WaitForChild("matchSettings")
        matchSettings:SetAttribute("toggle", true)
    end,
})
Tabs.Game:AddButton({
    Title = "Print Training Codes",
    Description = "",
    Callback = function()
        local privateServers = game:GetService("ReplicatedStorage").game.servers.private
for _, pserver in pairs(privateServers:GetChildren()) do
    local codev = pserver:FindFirstChild("code")
    if codev then
        print("Private Server Training Code: " .. codev.Value)
       end
    end
end
})


local WeatherSection = Tabs.Game:AddSection("Weather For Only You")
local RS = game:GetService("ReplicatedStorage")
local p = game.Players.LocalPlayer

local weatherSource = RS:WaitForChild("game"):WaitForChild("weather")
local timeSource = RS:WaitForChild("game"):WaitForChild("time")

local function applyWeather(name)
	local w = weatherSource:FindFirstChild(name)
	if w then
		local cloned = w:Clone()
		cloned.Parent = workspace
	end
end

local function applyTime(name)
	local t = timeSource:FindFirstChild(name)
	if t then
		local cloned = t:Clone()
		cloned.Parent = workspace
	end
end

Tabs.Game:AddButton({
	Title = "Snow",
	Description = "Set weather to Snow",
	Callback = function()
		applyWeather("Snow")
	end
})

Tabs.Game:AddButton({
	Title = "Rain",
	Description = "Set weather to Rain",
	Callback = function()
		applyWeather("Rain")
	end
})

Tabs.Game:AddButton({
	Title = "Clear",
	Description = "Set weather to Clear",
	Callback = function()
		applyWeather("Clear")
	end
})

Tabs.Game:AddButton({
	Title = "Overcast",
	Description = "Set weather to Overcast",
	Callback = function()
		applyWeather("Overcast")
	end
})



local TimeSection = Tabs.Game:AddSection("Time For Only You")

Tabs.Game:AddButton({
	Title = "Morning",
	Description = "Set time to Morning",
	Callback = function()
		applyTime("Morning")
	end
})

Tabs.Game:AddButton({
	Title = "Night",
	Description = "Set time to Night",
	Callback = function()
		applyTime("Night")
	end
})


local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local Terrain = workspace:FindFirstChildOfClass("Terrain")
local originalSettings = {
	GlobalShadows = Lighting.GlobalShadows,
	Brightness = Lighting.Brightness,
	ExposureCompensation = Lighting.ExposureCompensation,
	Ambient = Lighting.Ambient,
	OutdoorAmbient = Lighting.OutdoorAmbient,
	FogStart = Lighting.FogStart,
	FogEnd = Lighting.FogEnd,
	FogColor = Lighting.FogColor,
}
local changedParts = {}
local function tweenLighting(props)
	for prop, value in pairs(props) do
		local tween = TweenService:Create(Lighting, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {[prop] = value})
		tween:Play()
	end
end
local function applyLowGraphics()
	tweenLighting({
		GlobalShadows = false,
		Brightness = 1,
		ExposureCompensation = -1,
		Ambient = Color3.fromRGB(150, 150, 150),
		FogStart = 1000000,
		FogEnd = 1000000,
		FogColor = Color3.fromRGB(255, 255, 255),
	})
	for _, v in ipairs(Lighting:GetChildren()) do
		if v:IsA("PostEffect") then
			v.Enabled = false
		end
	end
	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA("Decal") or obj:IsA("Texture") then
			if not obj:IsDescendantOf(game.Players) then
				obj.Transparency = 1
			end
		elseif (obj:IsA("Part") or obj:IsA("MeshPart")) and not obj.Locked then
			if obj.Material ~= Enum.Material.SmoothPlastic then
				table.insert(changedParts, {Part = obj, Material = obj.Material})
				obj.Material = Enum.Material.SmoothPlastic
			end
		end
	end
	if Terrain then
		Terrain.WaterWaveSize = 0
		Terrain.WaterWaveSpeed = 0
		Terrain.WaterReflectance = 0
		Terrain.WaterTransparency = 1
	end
end
local function restoreGraphics()
	tweenLighting(originalSettings)
	for _, v in ipairs(Lighting:GetChildren()) do
		if v:IsA("PostEffect") then
			v.Enabled = true
		end
	end
	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA("Decal") or obj:IsA("Texture") then
			if not obj:IsDescendantOf(game.Players) then
				obj.Transparency = 0
			end
		end
	end
	for _, item in ipairs(changedParts) do
		if item.Part and item.Part:IsDescendantOf(workspace) then
			item.Part.Material = item.Material
		end
	end
	changedParts = {}
	if Terrain then
		Terrain.WaterWaveSize = 0.15
		Terrain.WaterWaveSpeed = 10
		Terrain.WaterReflectance = 1
		Terrain.WaterTransparency = 0.3
	end
end
local Toggle = Tabs.Game:AddToggle("", 
{
    Title = "Fps Booster", 
    Description = "",
    Default = false,
    Callback = function(state)
        if state then
			applyLowGraphics()
		else
			restoreGraphics()
		end
	end
})
local isHomeGoal = false
local isAwayGoal = false  
local HomeToggle = Tabs.Auto:AddToggle("", 
{
    Title = "Home Goal", 
    Description = "",
    Default = false,  
    Callback = function(state)
        if state then
            isHomeGoal = true
            isAwayGoal = false 
            print("Selected Home Goal Post")
        else
            isHomeGoal = false
            print("Home Goal Post Off")
        end
    end 
})
local AwayToggle = Tabs.Auto:AddToggle("", 
{
    Title = "Away Goal", 
    Description = "",
    Default = false,  
    Callback = function(state)
        if state then
            isAwayGoal = true
            isHomeGoal = false  
            print("Selected Away Goal Post")
        else
            isAwayGoal = false
            print("Away Goal Post Off")
        end
    end 
})
Tabs.Auto:AddButton({
    Title = "Auto Goal",
    Description = "",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local goalHome = Vector3.new(1.60, 5.14, -354.73)
        local goalAway = Vector3.new(0.65, 5.14, 358.32)
        local ballsFolder = workspace:FindFirstChild("game")
        if not ballsFolder then return end
        local closestBall
        local shortestDist = math.huge
        local hrp = character:WaitForChild("HumanoidRootPart")
        for _, item in ipairs(ballsFolder:GetDescendants()) do
            if item:IsA("BasePart") and (item:GetAttribute("networkOwner") or item:GetAttribute("lastTouch")) then
                local dist = (item.Position - hrp.Position).Magnitude
                if dist < shortestDist then
                    shortestDist = dist
                    closestBall = item
                end
            end
        end
        if closestBall then
            if isHomeGoal then
                closestBall.CFrame = CFrame.new(goalHome)
                print("Ball moved to Home Goal")
            elseif isAwayGoal then
                closestBall.CFrame = CFrame.new(goalAway)
                print("Ball moved to Away Goal")
            else
                print("No goal selected")
            end
        end
    end
})


Tabs.Keybinds:AddButton({
    Title = "Keybind Library",
    Description = "",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/sophiaaaaa/sdg/refs/heads/main/shit"))()
    end
})
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local playerId = game.Players.LocalPlayer.UserId
local levelFolder = ReplicatedStorage.network.Profiles[tostring(playerId)].level
local statsFolder = ReplicatedStorage.network.Profiles[tostring(playerId)].stats
local stats = {
"Goals",
"Assists",
"Saves",
"Wins",
"Matches",
"MOTM",
"Yellow Cards",
"Red Cards",
"Cash",
"Free Kicks",  
"Penalties",   
}
local levelStats = {
"Level",
"XP",
"XPNeeded"
}
local function CreateStat(folder, statName)
local statValue = folder:FindFirstChild(statName)
if not statValue then
    statValue = Instance.new("IntValue")
    statValue.Name = statName
    statValue.Parent = folder
    statValue:SetAttribute("key", "57F34E8F-7698-464A-B2DF-1452BF0073AC") 
end
return statValue
end
for _, statName in pairs(stats) do
    local statValue = CreateStat(statsFolder, statName)
    Tabs.StatsEditor:AddInput(statName, {
        Title = statName,
        Description = "Set value for " .. statName,
        Default = tostring(statValue.Value),
        Placeholder = "Enter " .. statName,
        Numeric = true,
        Finished = true,
        Callback = function(Text)
            local newValue = tonumber(Text)
            if newValue then
                statValue.Value = newValue
            else
                warn("wrong value entered for " .. statName)
            end
        end
    })
end
for _, statName in pairs(levelStats) do
    local statValue = CreateStat(levelFolder, statName)
    Tabs.StatsEditor:AddInput(statName, {
        Title = statName,
        Description = "Set value for " .. statName,
        Default = tostring(statValue.Value),
        Placeholder = "Enter " .. statName,
        Numeric = true,
        Finished = true,
        Callback = function(Text)
            local newValue = tonumber(Text)
            if newValue then
                statValue.Value = newValue
            else
                warn("wrong value entered for " .. statName)
            end
        end
    })
end
local loopStorage = {}

function createloop(id, fn)
	if loopStorage[id] then
		loopStorage[id]:Disconnect()
	end
	loopStorage[id] = game:GetService("RunService").Heartbeat:Connect(fn)
end

function stoploop(id)
	if loopStorage[id] then
		loopStorage[id]:Disconnect()
		loopStorage[id] = nil
	end
end


Tabs.BallMod:AddToggle("ball_predict_toggle", {
    Title = "Ball Predicator",
    Default = false,
    Callback = function(state)
        if state then
            createloop("ballprediction", function()
                task.wait()

                local balls = {}
                for _, obj in ipairs(workspace:GetDescendants()) do
                    if obj:IsA("Part") and obj:FindFirstChild("network") then
                        table.insert(balls, obj)
                    end
                end

                if #balls == 0 then
                    for _, v in pairs(workspace:GetChildren()) do
                        if v:IsA("Part") and v.Name == "prediction_dot" then
                            v:Destroy()
                        end
                    end
                    return
                end

                local function createPredictionDot(pos, size)
                    local dot = Instance.new("Part")
                    dot.Name = "prediction_dot"
                    dot.Shape = Enum.PartType.Ball
                    dot.Size = Vector3.new(size, size, size)
                    dot.Color = Color3.fromRGB(255, 85, 0) 
                    dot.Anchored = true
                    dot.CanCollide = false
                    dot.Position = pos
                    dot.Parent = workspace
                    return dot
                end

                local function getBodyForce(ball)
                    local success, force = pcall(function()
                        return ball:FindFirstChild("BodyForce")
                    end)
                    return success and force or nil
                end

                local char = player.Character
                local boot = char and char:FindFirstChild("RightBoot")
                if not char or not boot then return end

                table.sort(balls, function(a, b)
                    return (a.Position - boot.Position).Magnitude < (b.Position - boot.Position).Magnitude
                end)

                local predictionDots = {}
                local groundHeight = boot.Position.Y
                local closestBalls = {balls[1], balls[2], balls[3]}

                for _, v in pairs(workspace:GetChildren()) do
                    if v:IsA("Part") and v.Name == "prediction_dot" then
                        v:Destroy()
                    end
                end

                for _, ball in ipairs(closestBalls) do
                    if ball and ball.Velocity.Magnitude > 30 then
                        local pos = ball.Position
                        local vel = ball.Velocity
                        local steps = 30
                        local dur = 2
                        local step = dur / steps

                        local bodyForce = getBodyForce(ball)
                        local forceDir = bodyForce and bodyForce.Force.Unit or Vector3.new(0, 0, 0)
                        local forceMag = bodyForce and bodyForce.Force.Magnitude or 0
                        local lastDotPos

                        for i = 1, steps do
                            local t = i * step
                            local decay = math.exp(-t * 0.75)
                            local acc = (forceDir * (forceMag * decay)) / ball:GetMass()
                            local newVel = vel + acc * t
                            local horiz = Vector3.new(newVel.X, 0, newVel.Z) * t
                            local vert = Vector3.new(0, newVel.Y * t + 0.2 * -workspace.Gravity * t * t, 0)
                            local dotpos = pos + horiz + vert

                            if dotpos.Y <= groundHeight then break end

                            table.insert(predictionDots, createPredictionDot(dotpos, 0.8))
                            lastDotPos = dotpos
                        end

                        if lastDotPos then
                            local land = Vector3.new(lastDotPos.X, groundHeight, lastDotPos.Z)
                            table.insert(predictionDots, createPredictionDot(land, 1.6))
                        end
                    end
                end

                task.delay(3, function()
                    for _, dot in ipairs(predictionDots) do
                        if dot and dot.Parent then
                            dot:Destroy()
                        end
                    end
                end)
            end)
        else
            stoploop("ballprediction")
        end
    end
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer
local mouse = Player:GetMouse()
local camera = workspace.CurrentCamera
local ball = nil
local speedMultiplier = 50
local telekinesisEnabled = false
local function findBall()
	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA("BasePart") and obj:GetAttribute("networkOwner") == Player.UserId then
			return obj
		end
	end
	return nil
end
local function controlBall()
	if not telekinesisEnabled or not ball then return end
	local mousePos = mouse.Hit.p
	local ballPos = ball.Position
	local direction = (mousePos - ballPos)
	local distance = direction.Magnitude
	local adjustedSpeed = math.clamp(distance * speedMultiplier, 0, 250)
	ball.AssemblyLinearVelocity = direction.Unit * adjustedSpeed
end
RunService.Heartbeat:Connect(function()
	if not telekinesisEnabled then return end
	if not ball or not ball.Parent then
		ball = findBall()
	end
	controlBall()
end)
Tabs.BallMod:AddToggle("MyToggle", {
	Title = "Telekinesis V2",
	Description = "",
	Default = false,
	Callback = function(value)
		telekinesisEnabled = value
		if not value and ball then
			ball.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
		end
	end
})

local storedParts = {}

local Toggle = Tabs.BallMod:AddToggle("MyToggle", 
{
    Title = "Anti - Out", 
    Description = "",
    Default = false,
    Callback = function(state)
        local partsToRemove = {
            "AwayLeft", "AwayRight", "HomeLeft", "HomeRight", 
            "ThrowInFarSide", "ThrowInTunnelSide"
        }
        local targetFolder = game.Workspace:FindFirstChild("game")
            and game.Workspace.game:FindFirstChild("system")
            and game.Workspace.game.system:FindFirstChild("out")

        if not targetFolder then
            warn("")
            return
        end

        if state then
            for _, part in ipairs(targetFolder:GetChildren()) do
                if table.find(partsToRemove, part.Name) then
                    storedParts[part.Name] = part.Parent
                    part.Parent = nil
                end
            end
        else
            for partName, originalParent in pairs(storedParts) do
                local restoredPart = targetFolder:FindFirstChild(partName)
                if restoredPart then
                    restoredPart.Parent = originalParent
                else
                    warn("'" .. partName .. "'")
                end
            end
            storedParts = {}
        end
    end
})
local isBallMagnetEnabled = false
local Toggle = Tabs.BallMod:AddToggle("MyToggle", 
{
    Title = "Ball Magnet", 
    Description = "",
    Default = false, 
    Callback = function(state)
        isBallMagnetEnabled = state
        if state then
            print("enabled.")
        else
            print(" disabled.")
        end
    end 
})
game:GetService("RunService").Heartbeat:Connect(function()
    if isBallMagnetEnabled then  
        local character = game.Players.LocalPlayer.Character
        if character then
            for _, ball in ipairs(game.Workspace.game:GetDescendants()) do
                if ball:IsA("BasePart") and ball:GetAttribute("networkOwner") then
                    local attribute = ball:GetAttribute("networkOwner")
                    if attribute == game.Players.LocalPlayer.UserId then
                        ball.CFrame = CFrame.new(character.RightBoot.Position)
                    end
                end
            end
        end
    end
end)


local p = game.Players.LocalPlayer
local c = p.Character or p.CharacterAdded:Wait()
local hrp = c:WaitForChild("HumanoidRootPart")
Tabs.BallMod:AddButton({
	Title = "Bring Ball",
	Description = "",
	Callback = function()
		for _, b in ipairs(workspace:GetDescendants()) do
			if b:IsA("BasePart") and (b:GetAttribute("networkOwner") == p.UserId or b:GetAttribute("lastTouch") == p.UserId) then
				b.CFrame = hrp.CFrame + Vector3.new(0, 2, 0)
				break
			end
		end
	end
})



local ReplicatedStorage = game:GetService("ReplicatedStorage")
local sharedFolder = ReplicatedStorage:WaitForChild("network"):WaitForChild("Shared")
local function lockAndChangeNames()
    for _, child in pairs(sharedFolder:GetChildren()) do
        child.Name = "hi"
        if child:IsA("BasePart") or child:IsA("Model") then
            child.Anchored = true
            child.Locked = true
        end
    end
end
local function blockNameChange()
    sharedFolder.ChildAdded:Connect(function(child)
        child.Name = "hi"
        if child:IsA("BasePart") or child:IsA("Model") then
            child.Anchored = true
            child.Locked = true
        end
        child:GetPropertyChangedSignal("Name"):Connect(function()
            if child.Name ~= "hi" then
                child.Name = "hi"
            end
        end)
    end)
end
lockAndChangeNames()
blockNameChange()
for _, child in pairs(sharedFolder:GetChildren()) do
    child:GetPropertyChangedSignal("Name"):Connect(function()
        if child.Name ~= "hi" then
            child.Name = "hi"
        end
    end)
end
local Teams = game:GetService("Teams")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local network = ReplicatedStorage:WaitForChild("network")
local Shared = network:WaitForChild("Shared")
local hi = Shared:WaitForChild("hi")

for _, team in pairs(Teams:GetChildren()) do
    if team:IsA("Team") and team.Name ~= "Selecting" then
        local teamName = tostring(team.Name)
        Tabs.Team:AddButton({
            Title = "Switch to " .. teamName,
            Description = "",
            Callback = function()
                hi:FireServer(1000, "team", team)
            end
        })
    end
end
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})

InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Window:AddTab({ Title = "Theme", Icon = "palette" }))
SaveManager:BuildConfigSection(Window:AddTab({ Title = "Config", Icon = "sliders-horizontal" }))

Window:SelectTab(1)

SaveManager:LoadAutoloadConfig()

